SCHM0106

HEADER
{
 FREEID 34
 VARIABLES
 {
  #ARCHITECTURE="behavioral"
  #BLOCKTABLE_FILE="#HDL2DIAGRAM.bde"
  #DEFAULT_RANGE0="<range<index=\"0\"><name=\"cop\"><left=\"4\"><direction=\"downto\"><right=\"0\"><initial_value=\"\"><delay=\"\">>"
  #DEFAULT_RANGE1="<range<index=\"0\"><name=\"rd\"><left=\"127\"><direction=\"downto\"><right=\"0\"><initial_value=\"\"><delay=\"\">>"
  #DEFAULT_RANGE2="<range<index=\"0\"><name=\"rs1\"><left=\"127\"><direction=\"downto\"><right=\"0\"><initial_value=\"\"><delay=\"\">>"
  #DEFAULT_RANGE3="<range<index=\"0\"><name=\"rs2\"><left=\"127\"><direction=\"downto\"><right=\"0\"><initial_value=\"\"><delay=\"\">>"
  #DEFAULT_RANGE4="<range<index=\"0\"><name=\"rs3\"><left=\"127\"><direction=\"downto\"><right=\"0\"><initial_value=\"\"><delay=\"\">>"
  #ENTITY="ALU"
  #LANGUAGE="VHDL"
  AUTHOR="Matthew Champagne"
  COMPANY="Stony Brook Universoty"
  CREATIONDATE="11/27/2021"
  SOURCE="..\\src\\ALU.vhd"
 }
}

PAGE ""
{
 PAGEHEADER
 {
  MARGINS (200,200,200,200)
  RECT (0,0,0,0)
 }
 
 BODY
 {
  VHDLDESIGNUNITHDR  1, 0, 0
  {
   LABEL "Design Unit Header"
   TEXT 
"library ieee;\n"+
"use ieee.std_logic_1164.all;\n"+
"use ieee.NUMERIC_STD.all;\n"+
"use ieee.MATH_REAL.all;"
   RECT (220,260,620,505)
   MARGINS (20,20)
   MULTILINE
   SYNTAXCOLORED
   SHOWLABEL
   SHOWTEXT
   CORNER 10
  }
  ARCHITECTUREDECLARATIONS  2, 0, 0
  {
   LABEL "Architecture Declaration"
   TEXT 
"function saturatedRounding (num : std_logic_vector(127 downto 0);control : integer) return STD_LOGIC_VECTOR is \n"+
"                       variable maxInt : signed(127 downto 0) := to_signed((2 ** 31) - 1,128);\n"+
"                       variable minInt : signed(127 downto 0) := to_signed(-1 * (2 ** 31),128);\n"+
"                       variable maxLong : signed(127 downto 0) := to_signed((2 ** 63) - 1,128);\n"+
"                       variable minLong : signed(127 downto 0) := to_signed(-1 * (2 ** 31),128);\n"+
"                     begin\n"+
"                       if (signed(num) > maxInt and control = 0) then\n"+
"                          return (std_logic_vector(maxInt(127 downto 0)));\n"+
"                       elsif (signed(num) < minInt and control = 0) then\n"+
"                          return (std_logic_vector(minInt(127 downto 0)));\n"+
"                       elsif (signed(num) > maxLong and control = 1) then\n"+
"                          return (std_logic_vector(maxLong(127 downto 0)));\n"+
"                       elsif (signed(num) < minLong and control = 1) then\n"+
"                          return (std_logic_vector(minLong(127 downto 0)));\n"+
"                       else \n"+
"                          return (num);\n"+
"                       end if;\n"+
"                     end function saturatedRounding;\n"+
""
   RECT (220,505,620,905)
   MARGINS (20,20)
   MULTILINE
   SYNTAXCOLORED
   SHOWLABEL
   SHOWTEXT
   CORNER 10
  }
  PROCESS  3, 0, 0
  {
   LABEL "computation"
   TEXT 
"computation : process (rs1,rs2,rs3,cop)\n"+
"                         variable out1 : std_logic_vector(127 downto 0);\n"+
"                         variable rs1v : std_logic_vector(127 downto 0);\n"+
"                         variable rs2v : std_logic_vector(127 downto 0);\n"+
"                         variable rs3v : std_logic_vector(127 downto 0);\n"+
"                         variable count : integer range 0 to 33;\n"+
"                         variable LSB : std_logic_vector(0 downto 0);\n"+
"                       begin\n"+
"                         rs1v := rs1;\n"+
"                         rs2v := rs2;\n"+
"                         rs3v := rs3;\n"+
"                         if (to_integer(unsigned(cop(4 downto 0))) = 0) then\n"+
"                            out1(127 downto 0) := std_logic_vector(to_unsigned(0,128));\n"+
"                            out1((16 * to_integer(unsigned(rs2)) + 15) downto (16 * to_integer(unsigned(rs2)))) := rs1(15 downto 0);\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 1) then\n"+
"                            out1(31 downto 0) := std_logic_vector(signed(rs2v(15 downto 0)) * signed(rs3v(15 downto 0)) + signed(rs1v(31 downto 0)));\n"+
"                            out1 := saturatedRounding(out1,0);\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 2) then\n"+
"                            out1(31 downto 0) := std_logic_vector(signed(rs2v(31 downto 16)) * signed(rs3v(31 downto 16)) + signed(rs1v(31 downto 0)));\n"+
"                            out1 := saturatedRounding(out1,0);\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 3) then\n"+
"                            out1(31 downto 0) := std_logic_vector(signed(rs2v(15 downto 0)) * signed(rs3v(15 downto 0)) - signed(rs1v(31 downto 0)));\n"+
"                            out1 := saturatedRounding(out1,0);\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 4) then\n"+
"                            out1(31 downto 0) := std_logic_vector(signed(rs2v(31 downto 16)) * signed(rs3v(31 downto 16)) - signed(rs1v(31 downto 0)));\n"+
"                            out1 := saturatedRounding(out1,0);\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 5) then\n"+
"                            out1(63 downto 0) := std_logic_vector(signed(rs2v(31 downto 0)) * signed(rs3v(31 downto 0)) + signed(rs1v(63 downto 0)));\n"+
"                            out1 := saturatedRounding(out1,1);\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 6) then\n"+
"                            out1(63 downto 0) := std_logic_vector(signed(rs2v(63 downto 32)) * signed(rs3v(63 downto 32)) + signed(rs1v(63 downto 0)));\n"+
"                            out1 := saturatedRounding(out1,1);\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 7) then\n"+
"                            out1(63 downto 0) := std_logic_vector(signed(rs2v(31 downto 0)) * signed(rs3v(31 downto 0)) - signed(rs1v(63 downto 0)));\n"+
"                            out1 := saturatedRounding(out1,1);\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 8) then\n"+
"                            out1(63 downto 0) := std_logic_vector(signed(rs2v(63 downto 32)) * signed(rs3v(63 downto 32)) - signed(rs1v(63 downto 0)));\n"+
"                            out1 := saturatedRounding(out1,1);\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 9) then\n"+
"                            out1(127 downto 0) := std_logic_vector(to_unsigned(0,128));\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 10) then\n"+
"                            for i in 0 to 7 loop\n"+
"                                out1(16 * i + 15 downto 16 * i) := std_logic_vector(unsigned(rs1v((16 * i + 15) downto (16 * i))) + unsigned(rs2v((16 * i + 15) downto (16 * i))));\n"+
"                            end loop;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 11) then\n"+
"                            for i in 0 to 7 loop\n"+
"                                if (to_integer(signed(rs1v((16 * i + 15) downto (16 * i))) + signed(rs2v((16 * i + 15) downto (16 * i)))) < 32767 and to_integer(signed(rs1v((16 * i + 15) downto (16 * i))) + signed(rs2v((16 * i + 15) downto (16 * i)))) > - 32768) then\n"+
"                                   out1(16 * i + 15 downto 16 * i) := std_logic_vector(signed(rs1v((16 * i + 15) downto (16 * i))) + signed(rs2v((16 * i + 15) downto (16 * i))));\n"+
"                                elsif (to_integer(signed(rs1v((16 * i + 15) downto (16 * i))) + signed(rs2v((16 * i + 15) downto (16 * i)))) > 32767) then\n"+
"                                   out1(16 * i + 15 downto 16 * i) := std_logic_vector(to_signed(32767,16));\n"+
"                                else \n"+
"                                   out1(16 * i + 15 downto 16 * i) := std_logic_vector(to_signed(- 32768,16));\n"+
"                                end if;\n"+
"                            end loop;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 12) then\n"+
"                            for i in 0 to 3 loop\n"+
"                                out1(32 * i + 31 downto 32 * i) := std_logic_vector(signed(rs1v(31 downto 0)));\n"+
"                            end loop;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 13) then\n"+
"                            out1(127 downto 0) := std_logic_vector(to_unsigned(0,128));\n"+
"                            for i in 0 to 7 loop\n"+
"                                if ((to_integer(unsigned(rs1v((16 * i + 15) downto (16 * i)))) + to_integer(unsigned(rs2v((16 * i + 15) downto (16 * i))))) > 65535) then\n"+
"                                   out1(16 * i downto 16 * i) := \"1\";\n"+
"                                else \n"+
"                                   out1(16 * i downto 16 * i) := \"0\";\n"+
"                                end if;\n"+
"                            end loop;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 14) then\n"+
"                            for i in 0 to 3 loop\n"+
"                                while (count /= 32 and to_integer(unsigned(rs1v((32 * i + 31 - count) downto (32 * i + 31 - count)))) /= 1) loop\n"+
"                                    count := count + 1;\n"+
"                                end loop;\n"+
"                                out1(32 * i + 31 downto 32 * i) := std_logic_vector(to_unsigned(count,32));\n"+
"                                count := 0;\n"+
"                            end loop;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 15) then\n"+
"                            for i in 0 to 3 loop\n"+
"                                if (signed(rs1v((32 * i + 31) downto (32 * i))) > signed(rs2v((32 * i + 31) downto (32 * i)))) then\n"+
"                                   out1(32 * i + 31 downto 32 * i) := std_logic_vector(signed(rs1v((32 * i + 31) downto (32 * i))));\n"+
"                                else \n"+
"                                   out1(32 * i + 31 downto 32 * i) := std_logic_vector(signed(rs2v((32 * i + 31) downto (32 * i))));\n"+
"                                end if;\n"+
"                            end loop;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 16) then\n"+
"                            for i in 0 to 3 loop\n"+
"                                if (signed(rs1v((32 * i + 31) downto (32 * i))) < signed(rs2v((32 * i + 31) downto (32 * i)))) then\n"+
"                                   out1(32 * i + 31 downto 32 * i) := std_logic_vector(signed(rs1v((32 * i + 31) downto (32 * i))));\n"+
"                                else \n"+
"                                   out1(32 * i + 31 downto 32 * i) := std_logic_vector(signed(rs2v((32 * i + 31) downto (32 * i))));\n"+
"                                end if;\n"+
"                            end loop;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 17) then\n"+
"                            for i in 0 to 3 loop\n"+
"                                if (to_integer(signed(rs2v(32 * i + 31 downto 32 * i))) > 0) then\n"+
"                                   out1(32 * i + 31 downto 32 * i) := std_logic_vector(signed(rs1v(32 * i + 31 downto 32 * i)));\n"+
"                                else \n"+
"                                   out1(32 * i + 31 downto 32 * i) := std_logic_vector(to_signed(-1 * to_integer(signed(rs1v(32 * i + 31 downto 32 * i))),32));\n"+
"                                end if;\n"+
"                            end loop;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 18) then\n"+
"                            for i in 0 to 7 loop\n"+
"                                for j in 0 to 15 loop\n"+
"                                    if (to_integer(unsigned(rs1v((16 * i + 15 - j) downto (16 * i + 15 - j)))) = 1) then\n"+
"                                       count := count + 1;\n"+
"                                    end if;\n"+
"                                end loop;\n"+
"                                out1(16 * i + 15 downto 16 * i) := std_logic_vector(to_unsigned(count,16));\n"+
"                                count := 0;\n"+
"                            end loop;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 19) then\n"+
"                            for i in 0 to ((to_integer(unsigned(rs2v(6 downto 0)))) - 1) loop\n"+
"                                LSB := rs1v(0 downto 0);\n"+
"                                rs1v := std_logic_vector(shift_right(unsigned(rs1v),1));\n"+
"                                rs1v := LSB & rs1v(126 downto 0);\n"+
"                            end loop;\n"+
"                            out1 := rs1v;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 20) then\n"+
"                            for i in 0 to (to_integer(unsigned(rs2v(4 downto 0))) - 1) loop\n"+
"                                for j in 0 to 3 loop\n"+
"                                    LSB := rs1v(32 * j downto 32 * j);\n"+
"                                    rs1v(32 * j + 31 downto 32 * j) := std_logic_vector(shift_right(unsigned(rs1v(32 * j + 31 downto 32 * j)),1));\n"+
"                                    rs1v(32 * j + 31 downto 32 * j) := LSB & rs1v(32 * j + 30 downto 32 * j);\n"+
"                                end loop;\n"+
"                            end loop;\n"+
"                            out1 := rs1v;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 21) then\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 22) then\n"+
"                            for i in 0 to 7 loop\n"+
"                                out1(16 * i + 15 downto 16 * i) := std_logic_vector(unsigned(rs1v((16 * i + 15) downto (16 * i))) - unsigned(rs2v((16 * i + 15) downto (16 * i))));\n"+
"                            end loop;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 23) then\n"+
"                            for i in 0 to 7 loop\n"+
"                                if (to_integer(signed(rs1v((16 * i + 15) downto (16 * i))) - signed(rs2v((16 * i + 15) downto (16 * i)))) < 32767 and to_integer(signed(rs1v((16 * i + 15) downto (16 * i))) - signed(rs2v((16 * i + 15) downto (16 * i)))) > - 32768) then\n"+
"                                   out1(16 * i + 15 downto 16 * i) := std_logic_vector(signed(rs1v((16 * i + 15) downto (16 * i))) - signed(rs2v((16 * i + 15) downto (16 * i))));\n"+
"                                elsif (to_integer(signed(rs1v((16 * i + 15) downto (16 * i))) - signed(rs2v((16 * i + 15) downto (16 * i)))) > 32767) then\n"+
"                                   out1(16 * i + 15 downto 16 * i) := std_logic_vector(to_signed(32767,16));\n"+
"                                else \n"+
"                                   out1(16 * i + 15 downto 16 * i) := std_logic_vector(to_signed(- 32768,16));\n"+
"                                end if;\n"+
"                            end loop;\n"+
"                         elsif (to_integer(unsigned(cop(4 downto 0))) = 24) then\n"+
"                            out1 := rs1v xor rs2v;\n"+
"                         else \n"+
"                            report \"Invalid Cop value\\n\";\n"+
"                         end if;\n"+
"                         rd <= out1;\n"+
"                       end process;\n"+
"                      "
   RECT (1000,240,1401,640)
   MARGINS (20,20)
   SYNTAXCOLORED
   SHOWTEXT
   CORNER 10
   VTX (  20, 23, 25, 29, 32 )
   VARIABLES
   {
    #UPDATE_SENS_LIST="0"
   }
   LIST (  23, 25, 29, 32 )
  }
  INSTANCE  4, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="BusInput"
    #CUSTOM_NAME=""
    #LIBRARY="#terminals"
    #REFERENCE="rs1(127:0)"
    #SYMBOL="BusInput"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER=""
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
   COORD (860,380)
   VERTEXES ( (2,26) )
  }
  INSTANCE  5, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="BusInput"
    #CUSTOM_NAME=""
    #LIBRARY="#terminals"
    #REFERENCE="rs2(127:0)"
    #SYMBOL="BusInput"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER=""
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
   COORD (860,260)
   VERTEXES ( (2,28) )
  }
  INSTANCE  6, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="BusInput"
    #CUSTOM_NAME=""
    #LIBRARY="#terminals"
    #REFERENCE="rs3(127:0)"
    #SYMBOL="BusInput"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER=""
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
   COORD (860,300)
   VERTEXES ( (2,31) )
  }
  INSTANCE  7, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="BusInput"
    #CUSTOM_NAME=""
    #LIBRARY="#terminals"
    #REFERENCE="cop(4:0)"
    #SYMBOL="BusInput"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER=""
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
   COORD (860,340)
   VERTEXES ( (2,22) )
  }
  INSTANCE  8, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="BusOutput"
    #CUSTOM_NAME=""
    #LIBRARY="#terminals"
    #REFERENCE="rd(127:0)"
    #SYMBOL="BusOutput"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER=""
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
   COORD (1500,260)
   VERTEXES ( (2,19) )
  }
  TEXT  9, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (809,380,809,380)
   ALIGN 6
   PARENT 4
  }
  TEXT  10, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (809,260,809,260)
   ALIGN 6
   PARENT 5
  }
  TEXT  11, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (809,300,809,300)
   ALIGN 6
   PARENT 6
  }
  TEXT  12, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (809,340,809,340)
   ALIGN 6
   PARENT 7
  }
  TEXT  13, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (1551,260,1551,260)
   ALIGN 4
   PARENT 8
  }
  NET BUS  14, 0, 0
  {
   VARIABLES
   {
    #NAME="cop(4:0)"
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
  }
  NET BUS  15, 0, 0
  {
   VARIABLES
   {
    #NAME="rd(127:0)"
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
  }
  NET BUS  16, 0, 0
  {
   VARIABLES
   {
    #NAME="rs1(127:0)"
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
  }
  NET BUS  17, 0, 0
  {
   VARIABLES
   {
    #NAME="rs2(127:0)"
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
  }
  NET BUS  18, 0, 0
  {
   VARIABLES
   {
    #NAME="rs3(127:0)"
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
  }
  VTX  19, 0, 0
  {
   COORD (1500,260)
  }
  VTX  20, 0, 0
  {
   COORD (1401,260)
  }
  BUS  21, 0, 0
  {
   NET 15
   VTX 19, 20
  }
  VTX  22, 0, 0
  {
   COORD (860,340)
  }
  VTX  23, 0, 0
  {
   COORD (1000,340)
  }
  BUS  24, 0, 0
  {
   NET 14
   VTX 22, 23
  }
  VTX  25, 0, 0
  {
   COORD (1000,380)
  }
  VTX  26, 0, 0
  {
   COORD (860,380)
  }
  BUS  27, 0, 0
  {
   NET 16
   VTX 25, 26
  }
  VTX  28, 0, 0
  {
   COORD (860,260)
  }
  VTX  29, 0, 0
  {
   COORD (1000,260)
  }
  BUS  30, 0, 0
  {
   NET 17
   VTX 28, 29
  }
  VTX  31, 0, 0
  {
   COORD (860,300)
  }
  VTX  32, 0, 0
  {
   COORD (1000,300)
  }
  BUS  33, 0, 0
  {
   NET 18
   VTX 31, 32
  }
 }
 
}

